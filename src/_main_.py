__author__ = "T. Fornal"
__email__ = "tomasz.fornal6@gmail.com"

"""
Script runs  the plasma emissivity calculation. It requires to
choose the profile type (calculated or experimental), select
lines of interest and emission type (EXCIT, RECOM, CHEXC).
All input files are stored in the "_Input_files" directory.
"""

from collections import namedtuple
from pathlib import Path

import numpy as np
import pandas as pd

from reader import Emissivity
from kinetic_profiles import TwoGaussSumProfile, ExperimentalProfile


class EmissivitySimulator:
    def __init__(self, reff_magnetic_config, elements, transitions, kinetic_profiles):
        self.reff_magnetic_config = reff_magnetic_config
        self.elements = elements
        self.transitions = transitions
        self.kinetic_profiles = kinetic_profiles
        self.run()

    def two_gauss_prof(self):
        """
        Calculates plasma profiles out of sum of two Gaussian distributions.

        Parameters
        ----------
        ne : array_like
            List of electron densities for the Gaussian distributions.
        Te : array_like
            List of electron temperatures for the Gaussian distributions.

        Returns
        -------
        profile : pandas.DataFrame
            DataFrame of plasma profiles generated by TwoGaussSumProfile.

        """
        profile = TwoGaussSumProfile(self.n_e, self.T_e).profile_df
        return profile

    def experimental_prof(self) -> pd.DataFrame:
        """
        Retrieves plasma profiles from an experimental data file.

        Returns
        -------
        profile : pd.DataFrame
            DataFrame of plasma profiles generated by ExperimentalProfile.

        """
        experimental_profile_file = "report_20181016_037@3_3000_v_"
        profile = ExperimentalProfile(experimental_profile_file).profile_df
        return profile

    def run(self):
        Element = namedtuple("Element", "ion_state wavelength impurity_fraction")
        lyman_alpha_line = {
            "B": Element("Z4", 48.6, 0.02),
            "C": Element("Z5", 33.7, 0.02),
            "N": Element("Z6", 24.8, 0.02),
            "O": Element("Z7", 19.0, 0.02),
        }

        for element in self.elements:
            line = lyman_alpha_line[element]
            ce = Emissivity(
                element,
                line.ion_state,
                line.wavelength,
                line.impurity_fraction,
                self.transitions,
                self.reff_magnetic_config,
                self.kinetic_profiles,
            )


if __name__ == "__main__":
    n_e = [7e13, 0, 0.37, 9.8e12, 0.5, 0.11]
    T_e = [1870, 0, 0.155, 210, 0.38, 0.07]
    reff_magnetic_config = "Reff_coordinates-10_mm"
    elements = ["C", "B", "O", "N"]  #
    transitions = ["EXCIT", "RECOM"]

    # Select kinetic profiles
    kinetic_profiles = TwoGaussSumProfile(n_e, T_e).profiles_df
    # kinetic_profiles = ExperimentalProfile("report_20181011_012@5_5000_v_1").profile_df

    EmissivitySimulator(reff_magnetic_config, elements, transitions, kinetic_profiles)
